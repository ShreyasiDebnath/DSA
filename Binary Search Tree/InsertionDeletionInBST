
#include <stdio.h>
#include<malloc.h>
 
struct node{
    int data;
    struct node* left;
    struct node* right;
};
 
struct node* createNode(int data){
    struct node *n; // creating a node pointer
    n = (struct node *) malloc(sizeof(struct node)); // Allocating memory in the heap
    n->data = data; // Setting the data
    n->left = NULL; // Setting the left and right children to NULL
    n->right = NULL; // Setting the left and right children to NULL
    return n; // Finally returning the created node
}
 

 
void inOrder(struct  node* root){
    if(root!=NULL){
        inOrder(root->left);
        printf("%d ", root->data);
        inOrder(root->right);
    }
}
 

 
int search(struct node *root, int key){
   struct node *prev = NULL;
   while(root!=NULL){
       prev = root;
       if(key==root->data){
           printf("Cannot insert %d, already in BST", key);
           return 1;
       }
       else if(key<root->data){
           root = root->left;
       }
       else{
           root = root->right;
       }
   }
   return 0;
}
struct node *insert(struct node *node, int key) {
	if(search(node,key)==0){
	
	 	if (node == NULL){
	  		 return createNode(key);
		}
	  	if (key < node->data){
	    	node->left = insert(node->left, key);
		}
	  	else{
	    	node->right = insert(node->right, key);
		}
	}
	
  return node;
}
struct node* minValueNode(struct node* node)
{
    struct node* current = node;
  
    while (current && current->left != NULL)
        current = current->left;
  
    return current;
}
 
struct node* deleteNode(struct node* root, int key)
{
    // base case
    if (root == NULL)
        return root;
  
    if (key < root->data)
        root->left = deleteNode(root->left, key);
  
    else if (key > root->data)
        root->right = deleteNode(root->right, key);
  
  
    else {
       
        if (root->left == NULL) {
            struct node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            struct node* temp = root->left;
            free(root);
            return temp;
        }
  
       
        struct node* temp = minValueNode(root->right);
  
        root->data= temp->data;
  
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}


 

int main(int argc, char *argv[]) {
	struct node *root = NULL;
  int ch;
    int x;
    int r;
  
	        	
	printf("\nThe number of items you want to insert: ");
	scanf("%d",&r);
	while(r--){
    	printf("\nEnter the value you want to insert in binary search tree: ");
    	scanf("%d",&x);
        root=insert(root, x);
		}
		
	   printf( "Inorder traversal: ");
  	 inOrder(root);
	 printf("\nThe number of items you want to delete: ");
	scanf("%d",&r);
	while(r--){
    printf("\nEnter the value you want to delete from the  binary search tree: ");
    	scanf("%d",&x);
       root=deleteNode(root,x);
		}                    
	
	
    printf( "\nInorder traversal: ");
  	 inOrder(root);
	            
	
	        
    
return 0;

}
